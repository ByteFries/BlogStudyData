
#include <iostream>
#include <vector>

using namespace std;

vector<vector<int>> GetTranspose(const vector<vector<int>>& Matrix) // 전치 행렬
{
	int YSize = Matrix.size();
	int XSize = Matrix[0].size();

	vector<vector<int>> Transpose(XSize, vector<int>(YSize, 0));

	for (int i = 0; i < XSize; ++i)
	{
		for (int j = 0; j < YSize; ++j)
		{
			Transpose[i][j] = Matrix[j][i];
		}
	}

	return Transpose;
}

vector<vector<int>> GetMinorMatrix(const vector<vector<int>>& Matrix, int Row, int Column) // 소행렬
{
	int YSize = Matrix.size();
	int XSize = Matrix[0].size();

	vector<vector<int>> MinorMatrix;

	for (int i = 0; i < YSize; ++i)
	{
		if (i == Row) continue;
		
		vector<int> NewRow;

		for (int j = 0; j < XSize; ++j)
		{
			if (j == Column) continue;

			NewRow.push_back(Matrix[i][j]);
		}

		MinorMatrix.push_back(NewRow);
	}

	return MinorMatrix;
}


float GetDet(const vector<vector<int>>& Matrix) // 행렬식
{
	if (Matrix.size() == 1) return Matrix[0][0];
	if (Matrix.size() == 2) return Matrix[0][0] * Matrix[1][1] - Matrix[0][1] * Matrix[1][0];
	int N = Matrix.size();
	float Result = 0;
	
	for (int i = 0; i < N; ++i)
	{
		Result += (i % 2 == 0 ? 1 : -1) * Matrix[0][i] * GetDet(GetMinorMatrix(Matrix, 0, i));
	}

	return Result;
}

float GetCofactor(const vector<vector<int>>& Matrix, int Row, int Column) // 여인수
{
	return ((Row + Column) % 2 == 0 ? 1 : -1) * GetDet(GetMinorMatrix(Matrix, Row, Column));
}

vector<vector<int>> GetCofactorMatrix(const vector<vector<int>>& Matrix) // 여인수 행렬
{
	int YSize = Matrix.size();
	int XSize = Matrix[0].size();
	vector<vector<int>> CofactorMatrix(YSize, vector<int>(XSize, 0));

	for (int i = 0; i < YSize; ++i)
	{
		for (int j = 0; j < XSize; ++j)
		{
			CofactorMatrix[i][j] = GetCofactor(Matrix, i, j);
		}
	}

	return CofactorMatrix;
}

vector<vector<int>> GetInvMatrix(const vector<vector<int>>& Matrix) // 역행렬
{
	vector<vector<int>> AdjugateMat = GetTranspose(GetCofactorMatrix(Matrix));
	float Det = GetDet(Matrix);

	if (Det == 0)
	{
		cout << "행렬식: 0 -> 역행렬이 없음" << endl;
		return vector<vector<int>>();
	}

	for (auto& Row : AdjugateMat)
	{
		for (int& Value : Row)
		{
			Value /= Det;
		}
	}

	return AdjugateMat;
}


void PrintMatrix(const vector<vector<int>>& Matrix)
{
	for (const auto& Row : Matrix)
	{
		for (int Element : Row)
		
			cout << Element << " ";
		
		cout << endl;
	}
}

int main()
{
	vector<vector<int>> Matrix = { {1,1,0,0}, {0,0,1,1}, {1,1,1,1}, {1,2,3,4} };

	PrintMatrix(Matrix);

	cout << endl << endl;

	vector<vector<int>> Transpose = GetTranspose(Matrix);

	cout << "전치 행렬" << endl;
	PrintMatrix(Transpose);


	cout << endl << "소행렬 2,1" << endl;
	PrintMatrix(GetMinorMatrix(Matrix, 1, 0));


	cout << endl << "행렬식" << endl;
	cout << GetDet(Matrix);

	cout << endl << "여인수 1,1" << endl;
	cout << GetCofactor(Matrix, 0, 0) << endl;

	cout << endl << "여인수 행렬" << endl;
	PrintMatrix(GetCofactorMatrix(Matrix));

	cout << endl << "역행렬" << endl;
	PrintMatrix(GetInvMatrix(Matrix));
}
